# Generated by Django 2.2 on 2020-08-15 15:09

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('code', models.UUIDField(default=uuid.uuid4)),
                ('phone', models.CharField(default='', max_length=12)),
                ('user_role', models.PositiveSmallIntegerField(choices=[(0, 'SuperAdmin'), (1, 'Lecturer'), (2, 'Student')], default=2)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Active'), (0, 'In Active')], default=1)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('code', models.UUIDField(default=uuid.uuid4)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('0', 'In active'), ('1', 'Active')], default=0, max_length=200)),
            ],
            options={
                'verbose_name_plural': 'courses',
                'db_table': 'courses',
            },
        ),
        migrations.CreateModel(
            name='StudentLogBook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(default='Default Logbook', max_length=500, unique=True)),
                ('code', models.UUIDField(default=uuid.uuid4)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('0', 'Not Approved'), ('1', 'Approved')], default=0, max_length=200)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_logbook', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'student_logbooks',
                'db_table': 'student_logbooks',
            },
        ),
        migrations.CreateModel(
            name='StudentLogBookItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.UUIDField(default=uuid.uuid4)),
                ('date', models.DateField()),
                ('worked_on', models.CharField(max_length=500, unique=True)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('0', 'Not Approved'), ('1', 'Approved')], default=0, max_length=200)),
                ('logbook', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='api.StudentLogBook')),
            ],
            options={
                'verbose_name_plural': 'student_logbook_items',
                'db_table': 'student_logbook_items',
            },
        ),
        migrations.CreateModel(
            name='StudentAttachmentLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.UUIDField(default=uuid.uuid4)),
                ('street', models.CharField(default='', max_length=50)),
                ('lat', models.CharField(default='', max_length=100)),
                ('lng', models.CharField(default='', max_length=100)),
                ('info', models.CharField(default='', max_length=500)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_att_loc', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'student_attachment_locations',
                'db_table': 'student_attachment_locations',
            },
        ),
        migrations.CreateModel(
            name='LecturerStudentAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.UUIDField(default=uuid.uuid4)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('0', 'In active'), ('1', 'Active')], default=0, max_length=200)),
                ('lecturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lecturer_assign', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_assign', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'lecturer_student_assignments',
                'db_table': 'lecturer_student_assignments',
            },
        ),
    ]
